#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the vcontrold service
# s6-overlay docs: https://skarnet.org/software/s6/index.html
# (not used by this container https://github.com/just-containers/s6-overlay)
# ==============================================================================

bashio::log.info "vcontrold service starting ..."

# Declare variables
declare config_tty
declare config_deviceid
declare config_systemid
declare config_device
declare config_room
declare config_area
declare config_areadeclare config_file_vito="/etc/vcontrold/vito.xml"
declare config_file_vcontrold="/etc/vcontrold/vcontrold.xml"
declare config_commands
declare model_name

# Fetch MQTT settings
source /etc/services.d/get_mqtt_settings.sh

# Fetch vcontrold settings
source /etc/services.d/get_vcontrold_settings.sh

# Import helper functions
source /etc/services.d/mqtt_helper.sh

# Get configuration options from user
config_tty=$(bashio::config 'tty')
config_deviceid=$(bashio::config 'device_id')
config_systemid=$(bashio::config 'homa_system_id')
config_device=$(bashio::config 'homa_device')
config_room=$(bashio::config 'homa_room')
config_area=$(bashio::config 'hass_area')

# Check if custom vito.xml file exists
if [ -f "/config/vcontrold/vito.xml" ]; then
    bashio::log.info "Using custom vito.xml file."
    config_file_vito="/config/vcontrold/vito.xml"
else
    bashio::log.info "Using default vito.xml file."
fi

# Check if custom vcontrold.xml file exists
if [ -f "/config/vcontrold/vcontrold.xml" ]; then
    bashio::log.info "Using custom vcontrold.xml file."
    config_file_vcontrold="/config/vcontrold/vcontrold.xml"
else
    bashio::log.info "Using default vcontrold.xml file."
fi

# Get the device name from the vito.xml file based on the device ID
# Usage: get_device_name_from_xml
# Requires globals: config_deviceid, config_file_vito
# returns: device name or "UNKNOWN" if not found
get_device_name_from_xml() {
    xmlstarlet sel -t -m "/vito/devices/device[@ID='$config_deviceid']" -v "@name" -n "$config_file_vito" || {
        bashio::log.error "Device ID '$config_deviceid' not found in XML file '$config_file_vito'."
        return "UNKNOWN"
    }
    #xmllint --xpath "string(/vito/devices/device[@ID='$config_deviceid']/@name)" "$config_file_vito"
}

# Setup Home Assistant
model_name=$(get_device_name_from_xml)
manufacturer="Viesmann"
sw_version=$(bashio::addon.version)

# Publish HomA room and device meta
publish_topic "$(get_homa_topic meta/room)" "$config_room"
publish_topic "$(get_homa_topic meta/name)" "$config_device"

# Cleanup old scripts
rm -f /etc/vcontrold/1_mqtt_commands.txt /etc/vcontrold/2_mqtt.tmpl || true
echo '#!/bin/sh' > /etc/vcontrold/2_mqtt.tmpl

# Parse commands of config data 'commands' and generate mqtt template file
i=0
config_commands=$(bashio::config 'commands')
# This should be a JSON array: [{"command":"getTempRaumM2","type":"FLOAT1","topic":"Raumtemperatur","unit":"°C","class":"temperature"}, ...]
# but for unknown reason is a JSON-Line format: {"command":"getTempRaumM2","type":"FLOAT1","topic":"Raumtemperatur","unit":"°C","class":"temperature"}
# bashio::log.info "config_commands: $config_commands"
while read -r line; do
    ((i=i+1))
    # line is a JSON-Line, e.g. {"command":"getTempRaumM2","type":"FLOAT1","topic":"Raumtemperatur","unit":"°C","class":"temperature"}
    IFS=$'\t' read -r cmd type topic class unit template < <(echo "$line" | jq -r '"_" + 
    (.command // "") + "\t_" + (.type // "") + "\t_" + (.topic // "") + "\t_" +
    (.class // "") + "\t_" + (.unit // "") + "\t_" + (.template // "")')
    cmd="${cmd#_}"  # Remove added leading underscore to avoid parameter shifting issues
    type="${type#_}"
    topic="${topic#_}"
    class="${class#_}"
    unit="${unit#_}"
    template="${template#_}"
    # bashio::log.info "i=$i, cmd=$cmd, type=$type, topic=$topic, class=$class, unit=$unit, template=$template"
    if [[ -z "$cmd" ]]; then
         bashio::exit.nok "Command at index $i is empty. Please check your commands.yaml file."
    fi
    if [[ -z "$type" ]]; then
        bashio::log.warning "Type at index $i for command ${cmd} is not set. Defaulting to STRING."
        type="STRING"
    fi
    if [[ -z "$topic" ]]; then
        bashio::log.warning "Topic at index $i is not set. Defaulting to ${cmd}."
        topic="${cmd}"
    fi
    topic_tmpl=$(get_homa_topic "controls" "$topic")

    bashio::log.info "Configuring cmd ${i}: ${cmd} with type ${type} using topic '${topic_tmpl}'"
    echo $cmd >> /etc/vcontrold/1_mqtt_commands.txt

    if [[ $type == "FLOAT" ]]; then
        payload='$'$i''
    elif [[ $type == "FLOAT1" ]]; then
        payload='$(printf "%.1f" "$'$i'")'
    elif [[ $type == "INT" ]]; then
        payload='$(printf "%.0f" "$'$i'")'
    elif [[ $type == "STRING" ]]; then
        payload='"$R'$i'"'
    else
        bashio::exit.nok "Unsupported type '${type}' for command ${cmd}. Supported types are FLOAT, INT, STRING."
    fi

    echo 'if [ "x$E'$i'" = "xOK" ]; then' >> /etc/vcontrold/2_mqtt.tmpl
    echo '  mosquitto_pub -h $MQTT_HOST -p $MQTT_PORT -u $MQTT_USER -P $MQTT_PASSWORD -t "'${topic_tmpl}'" -m '${payload}' -r' >> /etc/vcontrold/2_mqtt.tmpl
    echo 'fi' >> /etc/vcontrold/2_mqtt.tmpl

    # Publish meta information for HomA integration
    publish_topic "$(get_homa_topic controls "$topic" meta/type)" "text"
    publish_topic "$(get_homa_topic controls "$topic" meta/order)" "$i"
    publish_topic "$(get_homa_topic controls "$topic" meta/unit)" " $unit"

    # Publish Home Assistant autoconfiguration message
    homeassistant_config "_$topic" "_$topic" "_$class" "_$unit" "_$template"
done <<< "$config_commands"

# Configure vcontrold.xml with the user-specified values
sed -i "s/#DEVICEID#/$config_deviceid/g" "$config_file_vcontrold"
sed -i "s|#VITOXML#|$config_file_vito|g" "$config_file_vcontrold"

# Enable or disable debug mode based on user configuration
if bashio::config.true 'debug'; then
    sed -i "s/#DEBUG#/y/g" "$config_file_vcontrold"
else
    sed -i "s/#DEBUG#/n/g" "$config_file_vcontrold"
fi

# https://skarnet.org/software/s6/s6-notifyoncheck.html
# -d : doublefork. s6-notifyoncheck will run as the grandchild of prog... instead of its direct child. This is useful if prog... never reaps zombies it does not know it has.
# -s initialsleep : sleep for initialsleep milliseconds before starting to poll the service for readiness. Default is 10 milliseconds.
# -w waitingtime : sleep for waitingtime milliseconds between two invocations of ./data/check. This is basically the polling period. Default is 1000: the service will be polled every second.
# -n n : give up after n unsuccessful invocations of ./data/check. 0 means infinite, i.e. keep polling until it succeeds, or times out, or the service dies first. Default is 7.
# -c checkprog... : invoke checkprog... instead of ./data/check. The checkprog string will be parsed by execlineb, so it can contain a full command line. This option is mainly useful is the program used to poll the service is very simple and can be inlined as a simple command line, to avoid needing to manage a whole script and a ./data/check file.
s6-notifyoncheck -d -s 200 -w 1000 -n 10 \
    -c 's6-tcpclient -v '$VCONTROL_HOST' '$VCONTROL_PORT' true' \
    true

# Start the vcontrold service or a dummy process for external control
if [ "$VCONTROL_HOST" = "localhost" ]; then
    bashio::log.info "Starting local vcontrold ..."
    exec /usr/sbin/vcontrold -x "$config_file_vcontrold" -n -U root -d "$config_tty"
else
    bashio::log.info "vcontrold is not running locally. Keeping process alive."
    tail -f /dev/null
fi
